name: Human ‚Üî GPT Intake

on:
  workflow_dispatch:
    inputs:
      payload_raw:
        description: "Loosely-formatted JSON string (quotes optional, CLI-safe)"
        required: true
        default: '{"phase":"inbox","conversation_id":"realrun-002","timestamp":"2025-07-09T07:30:00Z","role":"user","content":"Patch staged for implementation. Proceed with validation."}'
        type: string

permissions:
  contents: write
  issues: write

jobs:
  intake:
    runs-on: [self-hosted, windows]
    timeout-minutes: 90

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js (for AJV)
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Parse and validate input
        id: validate
        env:
          PAYLOAD_RAW: ${{ github.event.inputs.payload_raw }}
        run: |
          $ErrorActionPreference = 'Stop'
          $payload = ConvertFrom-Json -InputObject $env:PAYLOAD_RAW
          $phase = $payload.phase
          if (-not $phase) {
            Write-Error "‚ùå No phase specified in payload."
          }
          if ($phase -ne "inbox") {
            Write-Error "‚ùå Unsupported phase '$phase'. Only 'inbox' is allowed."
          }

          npm install -g ajv-cli@5 ajv-formats@2 | Out-Null
          $tempPath = Join-Path $env:RUNNER_TEMP "payload.json"
          $payload | ConvertTo-Json -Depth 10 | Out-File -Encoding utf8 -FilePath $tempPath

          ajv validate -c ajv-formats -s .gpt/schemas/intake-v1.json -d $tempPath

          $inboxPath = ".gpt/inbox/${{ github.run_number }}.json"
          Copy-Item -Path $tempPath -Destination $inboxPath
          "TIMESTAMP=${{ github.run_number }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Detect patch and hash it if in IMPLEMENT
        run: |
          $status = Get-Content .gpt/status.json | ConvertFrom-Json
          if ($status.current_phase -ne "IMPLEMENT") {
            Write-Output "‚ÑπÔ∏è Not in IMPLEMENT phase ‚Äî skipping patch processing."
            exit 0
          }

          $patch = Get-ChildItem .gpt/patches/*.patch -ErrorAction SilentlyContinue |
                   Sort-Object LastWriteTime -Descending |
                   Select-Object -First 1

          if (-not $patch) {
            Write-Output "‚ÑπÔ∏è No patch file found ‚Äî skipping."
            exit 0
          }

          Write-Output "üîç Found patch: $($patch.Name)"
          $hash = Get-FileHash -Path $patch.FullName -Algorithm SHA256
          "$($hash.Hash) *$($patch.Name)" | Out-File "$($patch.FullName).sha256"

      - name: Upload intake artifact
        uses: actions/upload-artifact@v4
        with:
          name: gpt-intake-${{ github.run_number }}
          path: .gpt/inbox/${{ github.run_number }}.json

      - name: Commit & push (with PR fallback)
        id: commit
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .gpt/inbox
          git add .gpt/patches/*.sha256 -ErrorAction SilentlyContinue
          git commit -m "ü§ñ GPT intake: add payload ${{ github.run_number }}" 2>$null

          if (git push origin HEAD:main 2>$null) {
            "BRANCH=" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            "PR_URL=" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }
          else {
            $branch = "gpt-input-${{ github.run_number }}"
            git push -u origin HEAD:$branch
            $prUrl = gh pr create --base main --head $branch --title "GPT Intake ${{ github.run_number }}" --body "Automated intake PR for payload ${{ github.run_number }}"
            "BRANCH=$branch" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            "PR_URL=$prUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }

      - name: Open tracking issue
        id: issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ steps.commit.outputs.PR_URL }}
        run: |
          $ts = "${{ github.run_number }}"
          if ($env:PR_URL) {
            $body = "Payload timestamp: $ts`n`nRelated PR: $env:PR_URL"
          }
          else {
            $body = "Payload timestamp: $ts"
          }
          $issueUrl = gh issue create --title "GPT Intake $ts" --body $body --label "gpt-intake"
          $issueNumber = $issueUrl -replace '.*/', ''
          "ISSUE_NUMBER=$issueNumber" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Wait for ACK comment (max 60 min)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ steps.issue.outputs.ISSUE_NUMBER }}
        run: |
          for ($i = 1; $i -le 60; $i++) {
            Write-Output "Polling issue #$env:ISSUE_NUMBER for 'ACK' comment (attempt $i/60)‚Ä¶"
            $comments = gh issue view $env:ISSUE_NUMBER --json comments --jq ".comments[].body"
            if ($comments -contains "ACK") {
              Write-Output "‚úÖ ACK detected ‚Äì workflow complete."
              exit 0
            }
            Start-Sleep -Seconds 60
          }
          Write-Error "‚ùå No ACK after 60 minutes ‚Äì failing job."
