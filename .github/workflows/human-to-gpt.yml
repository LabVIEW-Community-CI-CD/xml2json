name: Human ↔ GPT Intake
on:
  workflow_dispatch:
    inputs:
      payload_raw:
        description: 'JSON string (timestamp may be empty)'
        required: true
        default: |
          {
            "phase": "inbox",
            "conversation_id": "xml2json-intake-001",
            "timestamp": "",
            "role": "user",
            "content": "Please ingest gpt/issues/_intake_payload.md and create GitHub issues."
          }
        type: string

permissions:
  contents: write
  issues: write

jobs:
  intake:
    runs-on: windows-latest        # use GitHub‑hosted runner; change if you need self‑hosted
    timeout-minutes: 90
    defaults:
      run:
        shell: pwsh

    steps:
      # 1 – Checkout
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2 – Ensure inbox dir
      - name: Ensure gpt/inbox exists
        run: |
          New-Item -ItemType Directory -Path gpt/inbox -Force

      # 3 – Setup Node (AJV)
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 4 – Parse & validate payload
      - name: Parse + validate
        id: parse
        env:
          RAW: ${{ github.event.inputs.payload_raw }}
        run: |
          $p = ConvertFrom-Json $env:RAW
          if (-not $p.PSObject.Properties['timestamp']) {
            $p | Add-Member timestamp ''
          }
          $p.timestamp = (Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')
          if ($p.phase -ne 'inbox') { Write-Error "phase must be inbox" }
          npm i -g ajv-cli@5 ajv-formats@2 | Out-Null
          $tmp = Join-Path $env:RUNNER_TEMP payload.json
          $p | ConvertTo-Json -Depth 10 | Out-File $tmp -Encoding utf8
          ajv validate -c ajv-formats -s gpt/schemas/intake-v1.json -d $tmp
          Copy-Item $tmp "gpt/inbox/${{ github.run_number }}.json"

      # 5 – Open tracking issue with sentinel block
      - name: Open tracking issue
        id: track
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $run   = "${{ github.run_number }}"
          $block = "<!-- GPT-BEGIN -->`nPayload timestamp: $run`n<!-- GPT-END -->"
          $body  = "$block`n`nCopy **the block above** (including GPT-BEGIN/END) and paste it as a comment."
          $url   = gh issue create --title "GPT Intake $run" --body $body --label gpt-intake
          $num   = $url -replace '.*/', ''
          "ISSUE=$num" >> $env:GITHUB_OUTPUT

      # 6 – Wait for exact block match (CR/LF agnostic)
      - name: Wait for matching comment (60 min)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE: ${{ steps.track.outputs.ISSUE }}
        run: |
          function ExtractBlock($text) {
            $t = ($text -replace "`r","")            # strip CR
            if ($t -match '(?s)<!-- GPT-BEGIN -->(.*?)<!-- GPT-END -->') {
              return $Matches[1].Trim()
            } else { return '' }
          }

          $expected = ExtractBlock (gh issue view $env:ISSUE --json body --jq ".body")
          for ($i=1; $i -le 60; $i++) {
            Write-Output "Poll $i/60…"
            $comments = gh issue view $env:ISSUE --json comments --jq ".comments[].body"
            foreach ($c in $comments) {
              if (ExtractBlock $c -eq $expected) {
                Write-Output "✅ Match detected"
                exit 0
              }
            }
            Start-Sleep 60
          }
          Write-Error "No matching comment after 60 min"
