name: Human ↔ GPT Intake

on:
  workflow_dispatch:
    inputs:
      payload_raw:
        description: 'JSON string (timestamp may be empty)'
        required: true
        default: |
          {
            "phase": "inbox",
            "conversation_id": "xml2json-intake-001",
            "timestamp": "",
            "role": "user",
            "content": "Please ingest gpt/issues/_intake_payload.md and create GitHub issues."
          }
        type: string

permissions:
  contents: write
  issues: write

jobs:
  intake:
    runs-on: windows-latest
    timeout-minutes: 90
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure gpt/inbox directory exists
        run: |
          New-Item -ItemType Directory -Path gpt/inbox -Force

      - name: Setup Node (for AJV)
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Parse and validate input
        id: parse
        env:
          RAW: ${{ github.event.inputs.payload_raw }}
        run: |
          $payload = ConvertFrom-Json $env:RAW
          if (-not $payload.PSObject.Properties['timestamp']) {
            $payload | Add-Member timestamp ''
          }
          $payload.timestamp = (Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')
          if ($payload.phase -ne 'inbox') { Write-Error "phase must be inbox" }

          npm i -g ajv-cli@5 ajv-formats@2 | Out-Null
          $tmp = "$env:RUNNER_TEMP\payload.json"
          $payload | ConvertTo-Json -Depth 10 | Out-File $tmp -Encoding utf8
          ajv validate -c ajv-formats -s gpt/schemas/intake-v1.json -d $tmp

          Copy-Item $tmp "gpt/inbox/${{ github.run_number }}.json"

      - name: Open tracking issue (sentinel block)
        id: track
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $run = "${{ github.run_number }}"
          $sentinel = "<!-- GPT-BEGIN -->`nPayload timestamp: $run`n<!-- GPT-END -->"
          $body = @"
          $sentinel

          Copy **this entire block** (including GPT-BEGIN/END) and paste it as a **new comment** on this issue.
          _Do not add or remove anything._  The CI job resumes when it detects an exact‑match comment.
          "@
          $url = gh issue create --title "GPT Intake $run" --body $body --label gpt-intake
          $num = $url -replace '.*/', ''
          "ISSUE=$num" >> $env:GITHUB_OUTPUT

      - name: Wait for exact comment match (≤ 60 min)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE: ${{ steps.track.outputs.ISSUE }}
        run: |
          function ExtractBlock([string]$t) {
            $t = $t -replace "`r",""
            if ($t -match '(?s)<!-- GPT-BEGIN -->(.*?)<!-- GPT-END -->') {
              return $Matches[1].Trim()
            } else {
              return $null
            }
          }

          $expected = ExtractBlock (gh issue view $env:ISSUE --json body --jq ".body")
          if (-not $expected) { Write-Error "Sentinel block missing in issue body"; exit 1 }

          for ($i = 1; $i -le 60; $i++) {
            Write-Host "Polling $i/60…"
            $cBodies = gh issue view $env:ISSUE --json comments --jq ".comments[].body"
            foreach ($c in $cBodies) {
              $block = ExtractBlock $c
              if ($block -and $block -eq $expected) {
                Write-Host "✅ Match detected"
                exit 0
              }
            }
            Start-Sleep 60
          }
          Write-Error "No matching comment after 60 min"

      - name: Create issues from _intake_payload.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $file = "gpt/issues/_intake_payload.md"
          if (-not (Test-Path $file)) { Write-Error "$file not found" }

          $data = Get-Content $file -Raw -Encoding UTF8
          $parts = ($data -replace "`r","") -split "(?m)^\s*---\s*$"
          $count = 0
          foreach ($p in $parts) {
            $p = $p.Trim()
            if (-not $p) { continue }

            $header, $rest = $p -split "`n", 2
            if (-not $rest) { continue }

            if ($rest -match "(?m)^#\s+(.+?)\s*$") { $title = $Matches[1].Trim() } else { continue }
            if ($header -match "Phase\s+(\d+)") { $label = "phase$($Matches[1])" } else { $label = "gpt" }

            $body = $rest.Substring($rest.IndexOf("`n")+1).Trim()
            $tmp = "$env:RUNNER_TEMP\issue.md"
            $body | Out-File $tmp -Encoding utf8

            gh issue create --title "$title" --body-file "$tmp" --label "$label"
            $count++
          }
          Write-Host "Created $count issues."
