name: Human ↔ GPT Intake

on:
  workflow_dispatch:
    inputs:
      payload_raw:
        description: "Loosely-formatted JSON string (quotes optional, CLI-safe)"
        required: true
        default: '{"phase":"inbox","conversation_id":"realrun-002","timestamp":"2025-07-09T07:30:00Z","role":"user","content":"Patch staged for implementation. Proceed with validation."}'
        type: string

permissions:
  contents: write
  issues: write

jobs:
  intake:
    runs-on: [self-hosted, windows]
    timeout-minutes: 90

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js (for AJV)
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Sanitize and validate input (JSON + phase=inbox)
        id: validate
        env:
          PAYLOAD_RAW: ${{ github.event.inputs.payload_raw }}
        run: |
          set -euo pipefail
          echo "RAW INPUT: $PAYLOAD_RAW"
          echo "$PAYLOAD_RAW" | jq -Rs 'fromjson' > /tmp/payload.json || {
            echo "❌ Input is not valid JSON." >&2
            exit 1
          }
          npm install -g ajv-cli@5 ajv-formats@2 >/dev/null 2>&1
          ajv validate -s .gpt/schemas/intake-v1.json -d /tmp/payload.json || {
            echo "❌ Schema validation failed." >&2
            exit 1
          }
          phase=$(jq -r '.phase // empty' /tmp/payload.json)
          if [[ -z "$phase" ]]; then
            echo "❌ No phase specified in payload." >&2
            exit 1
          fi
          if [[ "$phase" != "inbox" ]]; then
            echo "❌ Unsupported phase '$phase'. Only 'inbox' is allowed." >&2
            exit 1
          fi
          echo "✅ Payload and phase validated."

      - name: Write payload to .gpt/inbox
        id: write_payload
        run: |
          set -euo pipefail
          ts=$(date +%s)
          mkdir -p .gpt/inbox
          cp /tmp/payload.json .gpt/inbox/${ts}.json
          echo "Wrote payload to .gpt/inbox/${ts}.json"
          echo "TIMESTAMP=$ts" >> $GITHUB_OUTPUT

      - name: If in IMPLEMENT phase, verify patch and hash
        if: ${{ success() }}
        run: |
          set -euo pipefail
          if [[ ! -f .gpt/status.json ]]; then
            echo "ℹ️ No .gpt/status.json — cannot determine phase."
            exit 0
          fi
          PHASE=$(jq -r .current_phase .gpt/status.json)
          if [[ "$PHASE" != "IMPLEMENT" ]]; then
            echo "ℹ️ Not in IMPLEMENT phase — skipping patch validation."
            exit 0
          fi
          PATCH=$(ls -1t .gpt/patches/*.patch 2>/dev/null | head -n1 || true)
          if [[ -z "$PATCH" ]]; then
            echo "ℹ️ No patch file found — skipping."
            exit 0
          fi
          echo "🔍 Found patch: $PATCH"
          sha256sum "$PATCH" | tee "$PATCH.sha256"
          if [[ -f .gpt/scripts/validate-tests.sh ]]; then
            echo "🧪 Running tests..."
            bash .gpt/scripts/validate-tests.sh
          else
            echo "⚠️ No test validation script found — skipping test execution."
          fi

      - name: Upload intake artifact
        uses: actions/upload-artifact@v4
        with:
          name: gpt-intake-${{ steps.write_payload.outputs.TIMESTAMP }}
          path: .gpt/inbox/${{ steps.write_payload.outputs.TIMESTAMP }}.json

      - name: Commit & push (PR fallback if protected)
        id: commit
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TS: ${{ steps.write_payload.outputs.TIMESTAMP }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .gpt/inbox || true
          git add .gpt/patches/*.sha256 || true
          git commit -m "🤖 GPT intake: add payload $TS" || echo "Nothing to commit."
          if git push origin HEAD:main; then
            echo "BRANCH=" >> $GITHUB_OUTPUT
            echo "PR_URL=" >> $GITHUB_OUTPUT
          else
            BRANCH="gpt-input-$TS"
            git push -u origin HEAD:$BRANCH
            PR_URL=$(gh pr create \
              --base main \
              --head "$BRANCH" \
              --title "GPT Intake $TS" \
              --body "Automated intake PR for payload $TS")
            echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT
            echo "PR_URL=$PR_URL" >> $GITHUB_OUTPUT

      - name: Open tracking issue
        id: issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TS: ${{ steps.write_payload.outputs.TIMESTAMP }}
          PR_URL: ${{ steps.commit.outputs.PR_URL }}
        run: |
          set -euo pipefail
          if [[ -n "${PR_URL}" ]]; then
            body="Payload timestamp: $TS\n\nRelated PR: $PR_URL"
          else
            body="Payload timestamp: $TS"
          fi
          ISSUE_URL=$(gh issue create \
            --title "GPT Intake $TS" \
            --body "$body" \
            --label "gpt-intake")
          echo "ISSUE_NUMBER=$(echo $ISSUE_URL | grep -o '[0-9]*$')" >> $GITHUB_OUTPUT

      - name: Wait for ACK comment (max 60 min)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ steps.issue.outputs.ISSUE_NUMBER }}
        run: |
          set -euo pipefail
          for i in {1..60}; do
            echo "Polling issue #$ISSUE_NUMBER for 'ACK' comment (attempt $i/60)…"
            if gh issue view "$ISSUE_NUMBER" \
                 --json comments \
                 --jq '.comments[].body' \
               | grep -qx "ACK"; then
              echo "✅ ACK detected – workflow complete."
              exit 0
            fi
            sleep 60
          done
          echo "❌ No ACK after 60 minutes – failing job." >&2
          exit 2
