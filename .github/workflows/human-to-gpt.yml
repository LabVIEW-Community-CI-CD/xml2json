name: Human-to-GPT Interface
on:
  workflow_dispatch:
    inputs:
      json_payload:
        description: 'JSON payload to process'
        required: true

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  process:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # GitHub CLI is pre-installed on ubuntu-latest runners; no manual installation needed

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Validate input phase
        run: |
          payload='${{ github.event.inputs.json_payload }}'
          # Extract "phase" from JSON (requires jq)
          phase=$(echo "$payload" | jq -r '.phase' || echo "")
          if [ -z "$phase" ] || [ "$phase" = "null" ]; then
            echo "Error: No phase specified in JSON payload." >&2
            exit 1
          fi
          if [ "$phase" != "inbox" ]; then
            echo "Error: Unsupported phase '$phase'. Only 'inbox' is allowed." >&2
            exit 1
          fi

      - name: Write payload file
        run: |
          timestamp=$(date +%s)
          payload_file=".gpt/inbox/${timestamp}.txt"
          mkdir -p "$(dirname "$payload_file")"
          cat <<'EOF' > "$payload_file"
          ${{ github.event.inputs.json_payload }}
          EOF
          echo "Wrote payload to $payload_file"
          # Export TIMESTAMP for later steps
          echo "TIMESTAMP=$timestamp" >> $GITHUB_ENV

      - name: Commit and push changes
        run: |
          # Add and commit the new file
          git add "$payload_file"
          git commit -m "Add input payload at $TIMESTAMP"
          # Attempt to push directly to main
          if git push origin HEAD:main; then
            echo "Changes pushed to main."
          else
            echo "Direct push to main failed. Creating a new branch and PR."
            pr_branch="gpt-input-${TIMESTAMP}"
            git switch -c "$pr_branch"
            git push origin "$pr_branch"
            # Create a PR into main
            pr_url=$(gh pr create --base main --head "$pr_branch" --title "New GPT input ${TIMESTAMP}" --body "Automated input submission")
            echo "Opened PR at $pr_url"
            # Optionally, mark PR URL for use in issue
            echo "PR_URL=$pr_url" >> $GITHUB_ENV
          fi

      - name: Create tracking issue
        run: |
          title="New input received at $TIMESTAMP"
          body="A new input has been submitted via the Human-to-GPT interface."
          body+=$'\n\nTimestamp: '"$TIMESTAMP"
          if [ -n "${PR_URL:-}" ]; then
            body+=$'\nPull Request: '"$PR_URL"
          fi
          # Create issue and capture its number
          issue_number=$(gh issue create --title "$title" --body "$body" --json number --jq '.number')
          echo "Tracking issue #$issue_number created."
          # Save issue number for polling
          echo "ISSUE_NUMBER=$issue_number" >> $GITHUB_ENV

      - name: Wait for ACK
        run: |
          echo "Polling issue #$ISSUE_NUMBER for an 'ACK' comment..."
          while true; do
            sleep 60
            comments=$(gh issue view $ISSUE_NUMBER --json comments --jq '.comments[].body')
            if echo "$comments" | grep -q -w "ACK"; then
              echo "ACK comment detected. Proceeding."
              break
            fi
            echo "No ACK yet. Checking again in 60 seconds..."
          done
