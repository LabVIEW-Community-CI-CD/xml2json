name: Human ‚Üî GPT Intake

on:
  workflow_dispatch:
    inputs:
      payload_raw:
        description: 'Loosely‚Äëformatted JSON string ("timestamp" may be empty)'
        required: true
        default: '{"phase":"inbox","conversation_id":"xml2json-intake-001","timestamp":"","role":"user","content":"Please ingest gpt/issues/_intake_payload.md and create GitHub issues."}'
        type: string

permissions:
  contents: write
  issues: write

jobs:
  intake:
    runs-on: [self-hosted, windows]
    timeout-minutes: 90
    defaults:
      run:
        shell: pwsh

    steps:
      # ------------------------------------------------------------
      # 1. Checkout repository
      # ------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ------------------------------------------------------------
      # 2. Ensure gpt/inbox directory exists
      # ------------------------------------------------------------
      - name: Ensure inbox directory exists
        run: |
          New-Item -ItemType Directory -Path gpt/inbox -Force

      # ------------------------------------------------------------
      # 3. Setup Node.js (for AJV JSON‚Äëschema validation)
      # ------------------------------------------------------------
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # ------------------------------------------------------------
      # 4. Parse and validate input payload
      # ------------------------------------------------------------
      - name: Parse and validate input
        id: validate
        env:
          PAYLOAD_RAW: ${{ github.event.inputs.payload_raw }}
        run: |
          $ErrorActionPreference = 'Stop'

          # Parse payload JSON
          $payload = ConvertFrom-Json -InputObject $env:PAYLOAD_RAW

          # Inject canonical UTC timestamp if field exists (placeholder may be empty)
          if (-not $payload.PSObject.Properties['timestamp']) {
            $payload | Add-Member -NotePropertyName timestamp -NotePropertyValue ''
          }
          $payload.timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")

          # Very basic schema check (phase must be "inbox")
          if ($payload.phase -ne 'inbox') {
            Write-Error "‚ùå phase must be 'inbox'."
          }

          # Validate against schema with AJV
          npm install -g ajv-cli@5 ajv-formats@2 | Out-Null
          $tempPath = Join-Path $env:RUNNER_TEMP 'payload.json'
          $payload | ConvertTo-Json -Depth 10 | Out-File -Encoding utf8 -FilePath $tempPath
          ajv validate -c ajv-formats -s gpt/schemas/intake-v1.json -d $tempPath

          # Save canonical payload into gpt/inbox
          $inboxPath = "gpt/inbox/${{ github.run_number }}.json"
          Copy-Item -Path $tempPath -Destination $inboxPath

      # ------------------------------------------------------------
      # 5. Upload payload artifact
      # ------------------------------------------------------------
      - name: Upload intake artifact
        uses: actions/upload-artifact@v4
        with:
          name: gpt-intake-${{ github.run_number }}
          path: gpt/inbox/${{ github.run_number }}.json

      # ------------------------------------------------------------
      # 6. Commit & push payload (PR‚Äëfallback)
      # ------------------------------------------------------------
      - name: Commit & push (PR fallback)
        id: commit
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add gpt/inbox
          git commit -m "ü§ñ GPT intake: add payload ${{ github.run_number }}" 2>$null
          git push origin HEAD:main 2>$null
          if ($LASTEXITCODE -eq 0) {
            "BRANCH=" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            "PR_URL=" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            $branch = "gpt-input-${{ github.run_number }}"
            git push -u origin HEAD:$branch
            $prUrl = gh pr create --base main --head $branch --title "GPT Intake ${{ github.run_number }}" --body "Automated intake PR for payload ${{ github.run_number }}"
            "BRANCH=$branch" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            "PR_URL=$prUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }

      # ------------------------------------------------------------
      # 7. Open tracking issue with clear instructions
      # ------------------------------------------------------------
      - name: Open tracking issue
        id: issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ steps.commit.outputs.PR_URL }}
        run: |
          $ts = "${{ github.run_number }}"

          $instruction = @"
**Action required ‚Üí**  
Copy **this entire block** (including this line) and paste it as a **new comment** on this issue.  
_Do not add or remove anything._¬†¬†¬†The CI job will resume when it detects an exact‚Äëmatch comment.
"@

          if ($env:PR_URL) {
            $body = "Payload timestamp: $ts`n`nRelated PR: $env:PR_URL`n`n$instruction"
          } else {
            $body = "Payload timestamp: $ts`n`n$instruction"
          }

          $issueUrl = gh issue create --title "GPT Intake $ts" --body $body --label "gpt-intake"
          $issueNumber = $issueUrl -replace '.*/', ''
          "ISSUE_NUMBER=$issueNumber" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      # ------------------------------------------------------------
      # 8. Wait for exact‚Äëmatch comment
      # ------------------------------------------------------------
      - name: Wait for matching comment (max 60‚ÄØmin)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ steps.issue.outputs.ISSUE_NUMBER }}
        run: |
          $issue_body = gh issue view $env:ISSUE_NUMBER --json body --jq ".body"
          for ($i = 1; $i -le 60; $i++) {
            Write-Output "Polling issue #$env:ISSUE_NUMBER for matching comment (attempt $i/60)‚Ä¶"
            $comments = gh issue view $env:ISSUE_NUMBER --json comments --jq ".comments[].body"
            if ($comments -contains $issue_body) {
              Write-Output "‚úÖ Matching comment detected ‚Äì workflow continues."
              exit 0
            }
            Start-Sleep -Seconds 60
          }
          Write-Error "‚ùå No matching comment after 60 minutes ‚Äì failing job."
