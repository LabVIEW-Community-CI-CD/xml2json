name: Human ↔ GPT Intake

on:
  workflow_dispatch:
    inputs:
      payload_raw:
        description: "Loosely-formatted JSON string (quotes optional, CLI-safe)"
        required: true
        default: '{"phase":"inbox","conversation_id":"realrun-001","timestamp":"2025-07-09T06:12:00Z","role":"user","content":"Use existing SRS at docs/SRS.md for PLAN phase validation. Begin real run."}'
        type: string

permissions:
  contents: write
  issues:   write

jobs:
  intake:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sanitize and validate input (JSON + phase=inbox)
        id: validate
        env:
          PAYLOAD_RAW: ${{ github.event.inputs.payload_raw }}
        run: |
          set -euo pipefail
          echo "RAW INPUT: $PAYLOAD_RAW"
          echo "$PAYLOAD_RAW" | jq -Rs 'fromjson' > /tmp/payload.json || {
            echo "❌ Input is not valid JSON." >&2
            exit 1
          }

          if ! command -v ajv >/dev/null; then
            npm install -g ajv-cli@5 ajv-formats >/dev/null 2>&1
          fi
          ajv validate -c ajv-formats \
            -s .gpt/schemas/intake-v1.json \
            -d /tmp/payload.json || {
              echo "❌ Schema validation failed." >&2
              exit 1
            }

          phase=$(jq -r '.phase // empty' /tmp/payload.json)
          if [ -z "$phase" ]; then
            echo "❌ No phase specified in payload." >&2
            exit 1
          fi
          if [ "$phase" != "inbox" ]; then
            echo "❌ Unsupported phase ‘$phase’. Only ‘inbox’ is allowed." >&2
            exit 1
          fi
          echo "✅ Payload and phase validated."

      - name: Write payload to .gpt/inbox file
        id: write
        run: |
          set -euo pipefail
          ts=$(date +%s)
          file=".gpt/inbox/${ts}.txt"
          mkdir -p .gpt/inbox
          cp /tmp/payload.json "$file"
          echo "Wrote payload to $file"
          echo "TIMESTAMP=$ts" >> "$GITHUB_OUTPUT"

      - name: Upload intake artifact
        uses: actions/upload-artifact@v4
        with:
          name: gpt-intake-${{ steps.write.outputs.TIMESTAMP }}
          path: .gpt/inbox/${{ steps.write.outputs.TIMESTAMP }}.txt

      - name: Commit & push (PR fallback if protected)
        id: commit
        env:
          TS: ${{ steps.write.outputs.TIMESTAMP }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .gpt/inbox || true
          git commit -m "🤖 GPT intake: add payload $TS" || echo "Nothing to commit."
          if git push origin HEAD:main; then
            echo "✅ Changes pushed to main."
            echo "BRANCH="   >> "$GITHUB_OUTPUT"
            echo "PR_URL="   >> "$GITHUB_OUTPUT"
          else
            echo "ℹ️  Direct push blocked – opening PR."
            BRANCH="gpt-input-$TS"
            git push -u origin HEAD:$BRANCH
            PR_URL=$(gh pr create \
                       --base main \
                       --head "$BRANCH" \
                       --title "GPT Intake $TS" \
                       --body  "Automated intake PR for payload $TS")
            echo "✅ PR opened: $PR_URL"
            echo "BRANCH=$BRANCH" >> "$GITHUB_OUTPUT"
            echo "PR_URL=$PR_URL" >> "$GITHUB_OUTPUT"

      - name: Open tracking issue
        id: issue
        env:
          TS:      ${{ steps.write.outputs.TIMESTAMP }}
          PR_URL:  ${{ steps.commit.outputs.PR_URL }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          body="Payload timestamp: $TS"
          if [ -n "${PR_URL:-}" ]; then
            body="$body

          Related PR: $PR_URL"
          fi
          ISSUE_URL=$(gh issue create \
                       --title "GPT Intake $TS" \
                       --body  "$body" \
                       --label "gpt-intake")
          echo "✅ Issue opened: $ISSUE_URL"
          ISSUE_NUMBER=$(echo "$ISSUE_URL" | grep -o '[0-9]*$')
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> "$GITHUB_OUTPUT"

      - name: Wait for ACK comment (max 60 min)
        env:
          GH_TOKEN:     ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ steps.issue.outputs.ISSUE_NUMBER }}
        run: |
          set -euo pipefail
          max_checks=60
          for ((i=1;i<=max_checks;i++)); do
            echo "Polling issue #$ISSUE_NUMBER for 'ACK' comment (attempt $i/$max_checks)…"
            if [ -n "$ISSUE_NUMBER" ] && gh issue view "$ISSUE_NUMBER" \
                 --json comments \
                 --jq '.comments[].body' | grep -q '^ACK$'; then
              echo "✅ ACK detected – workflow complete."
              exit 0
            fi
            sleep 60
          done
          echo "❌ No ACK after $((max_checks)) minutes – failing job." >&2
          exit 2
