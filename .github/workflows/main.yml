# .github/workflows/state-machine.yml
name: State-Machine Coordinator

on:
  workflow_dispatch:
    inputs:
      command:
        description: 'State-machine command (e.g. START, PLAN table, IMPLEMENT patch, etc.)'
        required: true
        default: 'START'
      payload:
        description: 'Optional extra content (e.g. your PLAN table, the patch text, or MANUAL-TEST confirmation)'
        required: false

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  REPO_URL: https://github.com/LabVIEW-Community-CI-CD/xml2json
  REPO_BRANCH: main

jobs:
  coordinate:
    runs-on: ubuntu-latest
    steps:

      - name: Ensure checkout
        uses: actions/checkout@v4

      - name: Invoke Backdoor Coordinator GPT
        id: call_coordinator
        run: |
          # Build the chat payload
          read -r -d '' PAYLOAD <<"EOF"
          SYSTEM:
          You are Backdoor Coordinator GPT for $REPO_URL (branch: $REPO_BRANCH),
          enforcing PLAN→IMPLEMENT→ITERATE→DELIVER for operator “sergio”.
          Follow the exact prompt spec provided in .github/coordinator-prompt.md.

          USER:
          Command: ${{ github.event.inputs.command }}
          Payload:
          ${{ github.event.inputs.payload }}
          EOF

          # Call OpenAI chat API (using the openai CLI)
          response=$(printf "%s" "$PAYLOAD" \
            | openai api chat.completions.create \
                --model gpt-4o-mini \
                --stream \
                --temperature 0 \
                --max-tokens 512 \
                --messages - \
            | tee coordinator.log)

          # Extract errors vs. notices
          if grep -q "^STATE ERROR" coordinator.log; then
            echo "::error::$(grep '^STATE ERROR' -m1 coordinator.log)"
            exit 1
          else
            echo "::notice::$(head -n1 coordinator.log)"
          fi

          # Save full text for inspection
          echo "$response" > response.txt

        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Upload Coordinator Response
        uses: actions/upload-artifact@v3
        with:
          name: coordinator-response
          path: |
            coordinator.log
            response.txt

      - name: Set outputs
        if: ${{ always() }}
        run: |
          # Expose the full assistant response for downstream steps
          echo "::set-output name=full_response::$(sed -e 's/%/%%/g' response.txt)"
